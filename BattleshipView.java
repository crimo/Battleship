/**
 * @author		Chris Moore <cmoore12@radford.edu>
 * @version 	1.0
 * @since		2012-04-22
 */
import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Panel;
import java.awt.Color;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JMenu;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class BattleshipView extends JFrame {

	private JPanel contentPane;
	JLabel[] labels = new JLabel[100];
	JRadioButton[] buttons = new JRadioButton[100];
	ButtonGroup fireButtons = new ButtonGroup();
	private boolean setMode = true;
	private final ButtonGroup orientation = new ButtonGroup();
	JLabel size, sizeLabel;
	JRadioButton horizontal, vertical;

	public BattleshipView() {
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 500, 750);
		
		JMenuBar Menu = new JMenuBar();
		setJMenuBar(Menu);
		
		//JMenu File = new JMenu("File");
		//Menu.add(File);
		
		JMenuItem NewGame = new JMenuItem("New Game");
		NewGame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				BattleshipController.beginGame();
			}
		});
		//File.add(NewGame);
		
		//JMenuItem Exit = new JMenuItem("Exit");
		//File.add(Exit);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		
		JPanel buttonPanel = new JPanel();
		
		JLabel lblBattleship = new JLabel("BATTLESHIP");
		lblBattleship.setFont(new Font("Tahoma", Font.PLAIN, 30));
		
		JPanel labelPanel = new JPanel();
		
		this.sizeLabel = new JLabel("Ship to place: ");
		sizeLabel.setFont(new Font("Tahoma", Font.PLAIN, 10));
		
		this.size = new JLabel("0");
		size.setFont(new Font("Tahoma", Font.PLAIN, 11));
		
		
		ActionListener changeOrientation = new ActionListener(){
			public void actionPerformed(ActionEvent actionEvent){
				BattleshipController.changeOrientation();
			}
		};
		
		
		
		vertical = new JRadioButton("Top to bottom");
		orientation.add(vertical);
		vertical.setActionCommand("vertical");
		vertical.addActionListener(changeOrientation);
		
		
		horizontal = new JRadioButton("Left to Right");
		orientation.add(horizontal);
		horizontal.setActionCommand("horizontal");
		horizontal.setSelected(true);
		horizontal.addActionListener(changeOrientation);
		
		
		//The following 2 blocks were generated by Eclipse
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPane.createSequentialGroup()
							.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
								.addGroup(gl_contentPane.createSequentialGroup()
									.addComponent(horizontal)
									.addGap(14))
								.addGroup(gl_contentPane.createSequentialGroup()
									.addComponent(vertical)
									.addPreferredGap(ComponentPlacement.UNRELATED)))
							.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(labelPanel, Alignment.LEADING, 0, 0, Short.MAX_VALUE)
								.addComponent(buttonPanel, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 263, Short.MAX_VALUE))
							.addContainerGap(112, Short.MAX_VALUE))
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(size, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
							.addComponent(lblBattleship, GroupLayout.PREFERRED_SIZE, 185, GroupLayout.PREFERRED_SIZE)
							.addGap(144))
						.addGroup(gl_contentPane.createSequentialGroup()
							.addComponent(sizeLabel, GroupLayout.PREFERRED_SIZE, 72, GroupLayout.PREFERRED_SIZE)
							.addContainerGap())))
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addContainerGap(48, Short.MAX_VALUE)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addComponent(labelPanel, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE)
						.addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
							.addComponent(sizeLabel)
							.addGap(6)))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addComponent(lblBattleship)
						.addComponent(size))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
							.addComponent(buttonPanel, GroupLayout.PREFERRED_SIZE, 264, GroupLayout.PREFERRED_SIZE)
							.addContainerGap())
						.addGroup(Alignment.TRAILING, gl_contentPane.createSequentialGroup()
							.addComponent(horizontal)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(vertical)
							.addGap(186))))
		);
		
		//instantiate labels, set properties, and add to panel
		for (int currentLabel=0; currentLabel<labels.length; currentLabel++){
			this.labels[currentLabel] = new JLabel("* ");
			this.labels[currentLabel].setFont(new Font("Tahoma", Font.BOLD, 20));
			labelPanel.add(labels[currentLabel]);
			this.labels[currentLabel].setEnabled(false);
			
		}

		//create actionListener for each time a button is pressed
		ActionListener shotFired = new ActionListener(){
			public void actionPerformed(ActionEvent actionEvent){
				System.out.println("setmode = " + setMode);
				JRadioButton buttonClicked = (JRadioButton) actionEvent.getSource();
				System.out.println(buttonClicked.getActionCommand());
				
				//placement section
				if(getMode()){
					
				      if(BattleshipController.placeShip(buttonClicked.getActionCommand()))
					    System.out.println("Ship placed");
				      else
						  JOptionPane.showMessageDialog(null,
							    "Your ship will not fit in the selected position",
							    "Invalid Placement",
						        JOptionPane.WARNING_MESSAGE);
			      }
			    

				else //fire a shot
				  BattleshipController.shotFired(buttonClicked.getActionCommand());
			}
		};
		//instantiate buttons, set properties, and add to panel
		for (int currentButton=0; currentButton<buttons.length; currentButton++){
			buttons[currentButton] = new JRadioButton("");
			fireButtons.add(buttons[currentButton]);
			buttons[currentButton].setActionCommand(currentButton + "");
			buttons[currentButton].addActionListener(shotFired);
			buttonPanel.add(buttons[currentButton]);
		}
		
		contentPane.setLayout(gl_contentPane);
		setVisible(true);
	}
	
	//update the label showing where a shot was fired
	public void updateLabel(BattleshipModel model){
		for (int rowScan=0; rowScan<10; rowScan++){
		  for(int columnScan=0; columnScan<10; columnScan++){
			if (model.getHit(rowScan, columnScan))
			  this.labels[rowScan*10+columnScan].setEnabled(true);
			if (model.getOccupied(rowScan, columnScan)){
			  this.labels[rowScan*10+columnScan].setEnabled(true);
		      this.labels[rowScan*10+columnScan].setForeground(Color.green);
			}
			if (model.getHit(rowScan, columnScan) && model.getOccupied(rowScan, columnScan))
				this.labels[rowScan*10+columnScan].setForeground(Color.red);
		  }	
		  this.size.setText(this.getShipName(model.getShipSize()));
		}
	}//end updateLabel
	
	         public String getShipName(int size){
	        	 String name = "";
	        	 switch (size) {
	        	 case 6 : name = "Aircraft Carrier (6)"; break;
	        	 case 5 : name = "Battleship (5)"; break;
	        	 case 4 : name = "Cruiser (4)"; break;
	        	 case 3 : name = "Submarine (3)"; break;
	        	 case 2 : name = "Houseboat (2)"; break;
	        	 case 1 : name = "Jetski (1)" ; break;
	        	 }
	        	 return name;
	         }
	
	public void updateButtons(BattleshipModel model){
		for (int rowScan=0; rowScan<10; rowScan++){
			  for(int columnScan=0; columnScan<10; columnScan++){
				  if (model.getHit(rowScan, columnScan)){
					  this.buttons[rowScan*10+columnScan].setEnabled(false);
				  if (model.getOccupied(rowScan, columnScan)){
					  this.buttons[rowScan*10+columnScan].setBackground(Color.red);
				  }
				  }
	    	  }
		}
	}
   
	public void winner(int playerWinner){
		JOptionPane.showMessageDialog(this,
			    "Player " + playerWinner + " is the winner!",
			    "Congratulations",
			    JOptionPane.WARNING_MESSAGE);
		System.exit(0);
	}
	
	public void showTurn(int playerTurn){
		JOptionPane.showMessageDialog(this,
			    "Player " + playerTurn + "'s turn",
			    "",
		        JOptionPane.WARNING_MESSAGE);
	}
	private boolean getMode(){
		return this.setMode;
	}
	public void changeMode(){
		this.setMode = !setMode;
		this.size.setEnabled(false);
		this.sizeLabel.setEnabled(false);
		this.horizontal.setEnabled(false);
		this.vertical.setEnabled(false);
	}
}//end class
